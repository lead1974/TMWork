@model TMWork.ViewModels.Home.ContactViewModel
@using TMWork.ViewModels.Home
@using TMWork.Data.Models.Customer
@using Microsoft.Extensions.Configuration;

@using TMWork.GoogleReCaptcha.Web.Validation;

@inject IConfiguration configuration;

@{
    ViewData["Title"] = "Contact Us";
}
<h2>Contact Us</h2>
<form asp-controller="Home" asp-action="Contact" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal" asp-antiforgery="true" id="ContactForm" data-role="validator">

    <div class="row">
        @if (ViewBag.UserMessage != null)
        {
            <div class="alert-success">@ViewBag.UserMessage</div>
        }
        <div class="col-md-5">
            <h4><strong>Get in Touch</strong></h4>
            <div asp-validation-summary="All" class="alert-danger"></div>

            <div class="form-group">
                <input asp-for="Name" type="text" class="form-control" placeholder="Name" />
            </div>
            <div class="form-group">
                <input type="email" class="form-control" placeholder="E-mail" asp-for="Email" />
            </div>
            <div class="form-group">
                <input type="tel" class="form-control" placeholder="Phone" asp-for="Phone" />
            </div>
            <div class="form-group">
                <textarea class="form-control" rows="13" placeholder="Message" asp-for="Message"></textarea>
            </div>
            <div class="form-group">
                @Html.GoogleReCaptcha(configuration.GetValue<String>("GoogleReCaptcha:ClientKey"))
            </div>
            <button class="btn btn-default" type="submit" name="button">
                <i class="fa fa-paper-plane-o" aria-hidden="true"></i> Submit
            </button>
        </div>
        <div class="col-md-7">
            <iframe src=@configuration.GetSection("SiteSettings")["GoogleMapCoordinates"] width="100%" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>
        </div>
    </div>
</form>
<br />
<div id="example" style="display:none;">
    <table id="grid">
        <colgroup>
            <col />
            <col />
            <col style="width:110px" />
            <col style="width:120px" />
            <col style="width:130px" />
        </colgroup>
        <thead>
            <tr>
                <th data-field="make">Car Make</th>
                <th data-field="model">Car Model</th>
                <th data-field="year">Year</th>
                <th data-field="category">Category</th>
                <th data-field="airconditioner">Air Conditioner</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    Volvo
                    <span style="display:none">Volvo, S60, 2010, Saloon, Yes</span>
                </td>
                <td>S60</td>
                <td>2010</td>
                <td>Saloon</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Audi</td>
                <td>A4</td>
                <td>2002</td>
                <td>Saloon</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>BMW</td>
                <td>535d</td>
                <td>2006</td>
                <td>Saloon</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>BMW</td>
                <td>320d</td>
                <td>2006</td>
                <td>Saloon</td>
                <td>No</td>
            </tr>
            <tr>
                <td>VW</td>
                <td>Passat</td>
                <td>2007</td>
                <td>Saloon</td>
                <td>No</td>
            </tr>
            <tr>
                <td>VW</td>
                <td>Passat</td>
                <td>2008</td>
                <td>Saloon</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Peugeot</td>
                <td>407</td>
                <td>2006</td>
                <td>Saloon</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Honda</td>
                <td>Accord</td>
                <td>2008</td>
                <td>Saloon</td>
                <td>No</td>
            </tr>
            <tr>
                <td>Alfa Romeo</td>
                <td>159</td>
                <td>2008</td>
                <td>Saloon</td>
                <td>No</td>
            </tr>
            <tr>
                <td>Nissan</td>
                <td>Almera</td>
                <td>2001</td>
                <td>Saloon</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Mitsubishi</td>
                <td>Lancer</td>
                <td>2008</td>
                <td>Saloon</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Opel</td>
                <td>Vectra</td>
                <td>2008</td>
                <td>Saloon</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Toyota</td>
                <td>Avensis</td>
                <td>2006</td>
                <td>Saloon</td>
                <td>No</td>
            </tr>
            <tr>
                <td>Toyota</td>
                <td>Avensis</td>
                <td>2008</td>
                <td>Saloon</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Toyota</td>
                <td>Avensis</td>
                <td>2008</td>
                <td>Saloon</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Audi</td>
                <td>Q7</td>
                <td>2007</td>
                <td>SUV</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Hyundai</td>
                <td>Santa Fe</td>
                <td>2012</td>
                <td>SUV</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Hyundai</td>
                <td>Santa Fe</td>
                <td>2013</td>
                <td>SUV</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Nissan</td>
                <td>Qashqai</td>
                <td>2007</td>
                <td>SUV</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Mercedez</td>
                <td>B Class</td>
                <td>2007</td>
                <td>Hatchback</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Lancia</td>
                <td>Ypsilon</td>
                <td>2006</td>
                <td>Hatchback</td>
                <td>Yes</td>
            </tr>
        </tbody>
    </table>
</div>
<hr />
<div class="col-lg-12">
    <h1 class="page-header">List of Contacts</h1>
    <input class="k-textbox" id="searchTxt" /> <i>Minimum 3 charachters required to trigger search function</i>
    <br />
    @(Html.Kendo().Grid<TMWork.Data.Models.Customer.Contact>()
                                                      .Name("contactgrid")
                                                      .Columns(columns =>
                                                      {
                                              //columns.Bound(p => p.FirstName).ClientTemplate("<a href='" + @Url.Action("About", "Home") + "/#=CustomerId#'>View</a>");
                                              columns.Bound(p => p.ContactId).Title("Id").Visible(false);
                                                          columns.Bound(p => p.Name).Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Clear().Contains("Contains"))));
                                                          columns.Bound(p => p.Phone).Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Clear().Contains("Contains"))));
                                                          columns.Bound(p => p.Email).Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Clear().Contains("Contains"))));
                                                          columns.Bound(p => p.Message).ClientTemplate("#:getTheSubstring(data.Message,20)#").Title("Message").HtmlAttributes(new { title = "#= Message #" }).Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Clear().Contains("Contains"))));
                                                          columns.Bound(p => p.DateCreated).Format("{0:M/d/yyyy HH:mm:ss}").EditorTemplateName("DateTime").Title("Date Created");
                                                          columns.Bound(p => p.DateUpdated).Format("{0:M/d/yyyy HH:mm:ss}").EditorTemplateName("DateTime").Title("Date Updated");
                                                          columns.Bound(p => p.UpdatedBy).Title("Updated By");
                                                          columns.Command(command =>
                                                          {
                                                              command.Edit();
                                                              command.Destroy();
                                                  //command.Custom("Action Name").Click("customAction");
                                              }).Width(250); //
                                          })
                                                      .ToolBar(tools =>
                                                      {
                                              //tools.Create();
                                              tools.Excel();

                                                      })
                                                  .Excel(excel => excel
                                                      .FileName("Contacts.xlsx"))
                                                  .Editable(editable => editable.Mode(GridEditMode.InLine)) //.TemplateName("Customer"))
                                                  .Sortable()
                                                  //.Scrollable()
                                                  //.Groupable()
                                                  .Pageable()
                                                  .Filterable()
                                                  .DataSource(dataSource =>
                                                      dataSource
                                                        .Ajax()
                                                        .ServerOperation(false)
                                                        .PageSize(50)
                                                        .Model(model =>
                                                        {
                                                            model.Id(p => p.ContactId);
                                                            model.Field(p => p.ContactId).Editable(false);
                                                            model.Field(p => p.Name).Editable(true);
                                                            model.Field(p => p.Phone).Editable(true);
                                                            model.Field(p => p.Email).Editable(true);
                                                            model.Field(p => p.Message).Editable(false);
                                                            model.Field(p => p.DateCreated).Editable(false);
                                                            model.Field(p => p.DateUpdated).Editable(false);
                                                            model.Field(p => p.UpdatedBy).Editable(false);
                                                        })
                                                    .Events(events => events.Error("error_handler"))
                                                    .Create(update => update.Action("ContactEditingPopup_Post", "Home"))
                                                    .Read(read => read.Action("ContactEditingPopup_Read", "Home"))
                                                    .Update(update => update.Action("ContactEditingPopup_Update", "Home"))
                                                    .Destroy(update => update.Action("ContactEditingPopup_Destroy", "Home"))
                                              )
    )
</div>
@section scripts
    {
    <script>
        function error_handler(e) {
            //var errors = $.parseJSON(e.xhr.responseText);
            //if (errors) {
            //    console.log(errors);
            //}
        }

        $(document).ready(function () {
            $("#Phone").kendoMaskedTextBox({
                mask: "(999) 000-0000"
            });


            $("#searchTxt").on("keyup change", function (e) {
                var grid = $("#contactgrid").data("kendoGrid");
                var searchTxt = $("#searchTxt").val();

                if (searchTxt.length >= 3) {

                    grid.dataSource.filter({
                        logic: "or", filters: [
                            { field: "Name", operator: "contains", value: searchTxt },
                            { field: "Phone", operator: "contains", value: searchTxt },
                            { field: "Email", operator: "contains", value: searchTxt },
                            { field: "Message", operator: "contains", value: searchTxt }]
                    });
                }
                else if (searchTxt.length == 0) {
                    grid.dataSource.filter([]);
                }
            });


            $("#grid").kendoGrid({
                columns: [
                    { field: "make" },
                    { field: "model", filterable: false },
                    { field: "year", filterable: false },
                    { field: "category", filterable: false },
                    { field: "airconditioner", filterable: false },

                ],
                toolbar: ["excel"],
                excel: {
                    fileName: "Cars.xlsx",
                    allPages: true
                },
                filterable: true,
                height: 430,
                sortable: true,
                pageable: {
                    messages: {
                        empty: "No items to display"
                    },
                    input: false,
                    refresh: true,
                    pageSizes: true,
                    pageSizes: [10, 20, 30, 50]
                }
            });

            $("#grid").data("kendoGrid").dataSource.pageSize(10);

        });

        function getTheSubstring(value, length) {
            if (value.length > length)
                return kendo.toString(value.substring(0, length)) + "...";
            else return kendo.toString(value);
        }

        $(function () {
            var container = $("#ContactForm");
            kendo.init(container);
            container.kendoValidator({
                rules: {
                    validmask: function (input) {
                        console.log(input);
                        if (input.is("[data-validmask-msg]") && input.val() != "") {
                            var maskedtextbox = input.data("kendoMaskedTextBox");
                            return maskedtextbox.value().indexOf(maskedtextbox.options.promptChar) === -1;
                        }

                        return true;
                    }
                }
            });
        });

    </script>
}

