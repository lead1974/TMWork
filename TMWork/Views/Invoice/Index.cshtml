@model TMWork.ViewModels.Invoice.InvoiceViewModel
@using System.Collections.Generic
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Authentication
@using TMWork.Data.Models.User
@using TMWork.Services

@inject SignInManager<AuthUser> SignInManager
@inject UserManager<AuthUser> UserManager
@{
    ViewData["Title"] = "Invoice";
}

@if (User.IsInRole(RoleName.CanManageSite) || User.IsInRole(RoleName.CanManageInvoices))
{
    <div class="col-lg-12">
        <h1 class="page-header">Invoice Maintanence</h1>
        <div class="btn-toolbar">
            <a asp-controller="Invoice" asp-action="CreateInvoice" asp-route-returnurl="@ViewData["ReturnUrl"]" class="btn btn-primary btn-lg"><i class="glyphicon glyphicon-plus"></i> Add Invoice</a>
        </div>
        <h4 />
        @*Filter all fields:
            <input id='filter' class='k-textbox' />
            <div id="grid"></div>
            <h4 />*@
        <input class="k-textbox" id="searchTxt" /> <i>Minimum 3 charachters required to trigger search function</i>
        <br />
        @(Html.Kendo().Grid<TMWork.ViewModels.Invoice.InvoiceViewModel>()
                                                          .Name("grid")
                                                          .Columns(columns =>
                                                          {
                                                              columns.Bound(p => p.InvoiceId).ClientTemplate(
                                                                  "<a href='" + @Url.Action("CreateEditInvoice", "Invoice", new { area = "" }) + "/?invoiceId=#=InvoiceId#' class='btn bth-xs btn-primary'><i class='glyphicon glyphicon-edit'></i> Edit</a> " +
                                                                  "<button class='btn bth-xs btn-danger js-delete' data-invoice-id=#=InvoiceId# data-invoice-name=#=InvoiceName#><i class='glyphicon glyphicon-trash'></i> Delete</button>"
                                                                  ).Title("Actions").Filterable(false);
                                                              columns.Bound(p => p.InvoiceName).Title("Invoice Name").Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Clear().Contains("Contains"))));
                                                              columns.Bound(p => p.InvoiceDate).Format("{0:d}").ToString();
                                                              columns.Bound(p => p.CustomerName).Visible(true).Title("Customer Name").Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Clear().Contains("Contains")))); //.ClientTemplate("#=FirstName# #=LastName#").Title("Customer Name").Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Clear().Contains("Contains"))));
                                                                                                                                                                                                                                                  //columns.Bound(p => p.FirstName).Filterable(filter => filter.Operators(o => o.ForString(f => f.Contains("Contains"))));
                                                                                                                                                                                                                                                  //columns.Bound(p => p.LastName).Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Contains("Contains"))));
                                                  columns.Bound(p => p.Email).Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Clear().Contains("Contains"))));
                                                              columns.Bound(p => p.Phone).Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Clear().Contains("Contains")))).ToString();
                                                              columns.Bound(p => p.WorkNotes).ClientTemplate("#:getTheSubstring(data.WorkNotes,20)#").Title("Work Notes").HtmlAttributes(new { title = "#= WorkNotes #" }).Filterable(filter => filter.Extra(false).Operators(o => o.ForString(f => f.Clear().Contains("Contains"))));
                                                          })
                                                          .ToolBar(tools =>
                                                          {
                                                              tools.Excel();
                                                          })
                                                          .Excel(excel => excel
                                                                  .FileName("Invoices.xlsx"))
                                                          .Sortable()
                                                          .Scrollable()
                                                          .Pageable()
                                                          .Filterable()
                                                          .HtmlAttributes(new { style = "height:550px;" })
                                                          .DataSource(dataSource =>
                                                              dataSource
                                                                .Ajax()
                                                                .PageSize(20)
                                                                .Model(model =>
                                                                {
                                                                    model.Id(p => p.InvoiceId);
                                                                    model.Field("InvoiceName", typeof(string));
                                                                    model.Field("InvoiceDate", typeof(DateTime));
                                                                    model.Field("CustomerName", typeof(string));
                                                        //model.Field("LastName", typeof(string));
                                                        model.Field("Email", typeof(string));
                                                                    model.Field("Phone", typeof(string));
                                                                    model.Field("WorkNotes", typeof(string));
                                                                })
                                                                .Events(events => events.Error("error_handler"))
                                                                .Read(read => read.Action("Invoice_Read", "Invoice"))
                                                          )
        )
    </div>
}

    @section scripts
        {
        <script>
            function error_handler(e) {
                var errors = $.parseJSON(e.xhr.responseText);
                if (errors) {
                    console.log(errors);
                    //alert("Errors: <br/>" + errors.join("<br/>"));
                }
            }


            function isNumeric(n) {
                return !isNaN(parseFloat(n)) && isFinite(n);
            }

            function getBoolean(str) {
                if ("true".startsWith(str)) {
                    return true;
                } else if ("false".startsWith(str)) {
                    return false;
                } else {
                    return null;
                }
            }

            function getTheSubstring(value, length) {
                if (value.length > length)
                    return kendo.toString(value.substring(0, length)) + "...";
                else return kendo.toString(value);
            }

            $(document).ready(function () {
                $("#grid").on("click", ".js-delete", function () {
                    var button = $(this);
                    bootbox
                        .confirm("Are you sure you want to delete this invoice : " + button.attr("data-invoice-name") + "?", function (result) {
                            if (result) {
                                $.ajax({
                                    url: "/invoice_delete/?invoiceId=" + button.attr("data-invoice-id"),
                                    method: "DELETE",
                                    success: function () {
                                        button.parent().parent().remove();
                                        //table.row(button.parents("tr")).remove().draw();
                                    }
                                });
                            }
                        })
                        .css({
                            'font-weight': 'bold',
                            'margin-top': function () {
                                var w = $(window).height();
                                var b = $(".modal-dialog").height();
                                // should not be (w-h)/2
                                var h = (w - b) / 2;
                                return h + "px";
                            }
                        });
                });

                $("#searchTxt").on("keyup change", function (e) {
                    var grid = $("#grid").data("kendoGrid");
                    var searchTxt = $("#searchTxt").val();

                    if (searchTxt.length >= 3) {

                        grid.dataSource.filter({
                            logic: "or", filters: [
                                { field: "InvoiceName", operator: "contains", value: searchTxt },
                                { field: "InvoiceDate", operator: "contains", value: searchTxt },
                                { field: "Phone", operator: "contains", value: searchTxt },
                                { field: "WorkNotes", operator: "contains", value: searchTxt },
                                { field: "CustomerName", operator: "contains", value: searchTxt }]
                        });
                    }
                    else if (searchTxt.length == 0) {
                        grid.dataSource.filter([]);
                    }
                });



                //  });

                //$('#filter').on('input', function (e) {
                //    var grid = $('#grid').data('kendoGrid');
                //    var columns = grid.columns;

                //    var filter = { logic: 'or', filters: [] };
                //    columns.forEach(function (x) {
                //        if (x.field) {
                //            var type = grid.dataSource.options.schema.model.fields[x.field].type;
                //            if (type == 'string') {
                //                filter.filters.push({
                //                    field: x.field,
                //                    operator: 'contains',
                //                    value: e.target.value
                //                })
                //            }
                //            else if (type == 'number') {
                //                if (isNumeric(e.target.value)) {
                //                    filter.filters.push({
                //                        field: x.field,
                //                        operator: 'eq',
                //                        value: e.target.value
                //                    });
                //                }

                //            } else if (type == 'date') {
                //                var data = grid.dataSource.data();
                //                for (var i = 0; i < data.length; i++) {
                //                    var dateStr = kendo.format(x.format, data[i][x.field]);
                //                    // change to includes() if you wish to filter that way https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
                //                    if (dateStr.startsWith(e.target.value)) {
                //                        filter.filters.push({
                //                            field: x.field,
                //                            operator: 'eq',
                //                            value: data[i][x.field]
                //                        })
                //                    }
                //                }
                //            } else if (type == 'boolean' && getBoolean(e.target.value) !== null) {
                //                var bool = getBoolean(e.target.value);
                //                filter.filters.push({
                //                    field: x.field,
                //                    operator: 'eq',
                //                    value: bool
                //                });
                //            }
                //        }
                //    });
                //    grid.dataSource.filter(filter);
                //});
            });
        </script>
    }

